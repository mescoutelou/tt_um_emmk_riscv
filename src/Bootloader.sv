// Generated by CIRCT firtool-1.62.0
module Bootloader(
  input         clock,
                reset,
                io_i_boot,
                io_i_valid,
  input  [7:0]  io_i_data,
  input         io_i_ready,
  output        io_o_valid,
  output [7:0]  io_o_data,
  output        io_o_bl,
                io_b_mem_valid,
  output [15:0] io_b_mem_addr,
  output [3:0]  io_b_mem_wen,
  output [31:0] io_b_mem_wdata,
  input         io_b_mem_ready,
  input  [31:0] io_b_mem_rdata
);

  reg  [4:0]  r_cstate;
  reg  [7:0]  r_num_cnt;
  reg  [15:0] r_byte_cnt;
  reg  [7:0]  r_num;
  reg  [7:0]  r_start_0;
  reg  [7:0]  r_start_1;
  reg  [7:0]  r_offset_0;
  reg  [7:0]  r_offset_1;
  reg         r_bl;
  reg  [15:0] r_mem_addr;
  reg  [3:0]  r_mem_wen;
  reg  [7:0]  r_mem_data;
  wire        _GEN = r_cstate == 5'h0;
  wire        _GEN_0 = r_cstate == 5'h1;
  wire        _GEN_1 = r_cstate == 5'h2;
  wire        _GEN_2 = r_cstate == 5'h3;
  wire        _GEN_3 = r_cstate == 5'h4;
  wire        _GEN_4 = r_cstate == 5'h5;
  wire        _GEN_5 = r_cstate == 5'h6;
  wire        _GEN_6 = r_cstate == 5'h7;
  wire        _GEN_7 = r_cstate == 5'h8;
  wire        _GEN_8 = r_cstate == 5'h9;
  wire        _GEN_9 = r_cstate == 5'hA;
  wire        _GEN_10 = r_cstate == 5'hB;
  wire        _GEN_11 = r_cstate == 5'hC;
  wire        _GEN_12 = r_cstate == 5'hD;
  wire        _GEN_13 = r_cstate == 5'hE;
  wire        _GEN_14 = r_cstate == 5'hF;
  wire        _GEN_15 = r_cstate == 5'h10;
  wire        _GEN_16 = _GEN_13 | _GEN_14;
  always @(posedge clock) begin
    automatic logic _GEN_17;
    automatic logic _GEN_18;
    automatic logic _GEN_19;
    automatic logic _GEN_20;
    automatic logic _GEN_21;
    automatic logic _GEN_22 = _GEN | _GEN_0;
    automatic logic _GEN_23;
    automatic logic _GEN_24;
    automatic logic _GEN_25;
    automatic logic _GEN_26;
    automatic logic _GEN_27;
    automatic logic _GEN_28;
    automatic logic _GEN_29;
    automatic logic _GEN_30;
    _GEN_17 = io_i_data == 8'h0;
    _GEN_18 = _GEN_1 & io_i_valid;
    _GEN_19 = io_i_data == 8'h1;
    _GEN_20 = io_i_data == 8'h2;
    _GEN_21 = io_i_data == 8'h3;
    _GEN_23 = io_i_valid & ~(r_byte_cnt[0]);
    _GEN_24 = io_i_valid & r_byte_cnt[0];
    _GEN_25 = r_byte_cnt == 16'h1;
    _GEN_26 = io_i_valid & _GEN_25;
    _GEN_27 = r_byte_cnt == {r_offset_1, r_offset_0} - 16'h1;
    _GEN_28 = _GEN_2 | _GEN_3 | _GEN_4;
    _GEN_29 = _GEN_15 & io_i_ready;
    _GEN_30 = _GEN_7 | _GEN_8;
    if (reset) begin
      r_cstate <= 5'h0;
      r_bl <= 1'h1;
    end
    else begin
      if (_GEN)
        r_cstate <= io_i_boot ? 5'h1 : 5'h4;
      else if (_GEN_0) begin
        if (io_i_valid)
          r_cstate <= _GEN_17 ? 5'h4 : 5'h2;
      end
      else if (_GEN_1) begin
        if (io_i_valid)
          r_cstate <=
            _GEN_17 ? 5'h5 : _GEN_19 ? 5'h6 : _GEN_20 ? 5'hB : _GEN_21 ? 5'hC : 5'h5;
      end
      else if (_GEN_2) begin
        if (io_i_ready)
          r_cstate <= 5'h4;
      end
      else if (~_GEN_3) begin
        automatic logic       _GEN_31;
        automatic logic [4:0] _GEN_32;
        _GEN_31 = r_num_cnt == r_num;
        _GEN_32 = _GEN_31 ? 5'h4 : 5'h2;
        if (_GEN_4)
          r_cstate <= _GEN_32;
        else if (_GEN_5) begin
          if (_GEN_26)
            r_cstate <= 5'h7;
        end
        else if (_GEN_6) begin
          if (_GEN_26)
            r_cstate <= 5'h8;
        end
        else if (_GEN_7) begin
          if (io_i_valid)
            r_cstate <= 5'h9;
        end
        else if (_GEN_8) begin
          if (io_b_mem_ready)
            r_cstate <= 5'hA;
        end
        else if (_GEN_9)
          r_cstate <= _GEN_27 ? _GEN_32 : 5'h8;
        else if (_GEN_10) begin
          if (io_i_ready)
            r_cstate <= _GEN_32;
        end
        else if (_GEN_11) begin
          if (_GEN_26)
            r_cstate <= 5'hD;
        end
        else if (_GEN_12) begin
          if (_GEN_26)
            r_cstate <= 5'hE;
        end
        else if (_GEN_13) begin
          if (io_b_mem_ready)
            r_cstate <= 5'hF;
        end
        else if (_GEN_14)
          r_cstate <= 5'h10;
        else if (_GEN_29)
          r_cstate <= _GEN_27 ? {4'h1, _GEN_31} : 5'hE;
      end
      r_bl <= (_GEN | _GEN_0 | _GEN_1 | _GEN_2 | ~_GEN_3) & r_bl;
    end
    if (_GEN)
      r_num_cnt <= 8'h0;
    else if (_GEN_0 | ~_GEN_18) begin
    end
    else
      r_num_cnt <= r_num_cnt + 8'h1;
    if (~_GEN_22) begin
      if (_GEN_1) begin
        if (~io_i_valid | _GEN_17 | ~(_GEN_19 | _GEN_20 | _GEN_21)) begin
        end
        else
          r_byte_cnt <= 16'h0;
        if (~io_i_valid | _GEN_17 | _GEN_19 | ~_GEN_20) begin
        end
        else
          r_mem_data <= 8'hAA;
      end
      else begin
        if (~_GEN_28) begin
          if (_GEN_5) begin
            if (io_i_valid) begin
              if (_GEN_25)
                r_byte_cnt <= 16'h0;
              else
                r_byte_cnt <= r_byte_cnt + 16'h1;
            end
          end
          else if (_GEN_6) begin
            if (io_i_valid) begin
              if (_GEN_25)
                r_byte_cnt <= 16'h0;
              else
                r_byte_cnt <= r_byte_cnt + 16'h1;
            end
          end
          else if (~_GEN_30) begin
            if (_GEN_9) begin
              if (_GEN_27)
                r_byte_cnt <= 16'h0;
              else
                r_byte_cnt <= r_byte_cnt + 16'h1;
            end
            else if (~_GEN_10) begin
              if (_GEN_11) begin
                if (io_i_valid) begin
                  if (_GEN_25)
                    r_byte_cnt <= 16'h0;
                  else
                    r_byte_cnt <= r_byte_cnt + 16'h1;
                end
              end
              else if (_GEN_12) begin
                if (io_i_valid) begin
                  if (_GEN_25)
                    r_byte_cnt <= 16'h0;
                  else
                    r_byte_cnt <= r_byte_cnt + 16'h1;
                end
              end
              else if (_GEN_16 | ~_GEN_29) begin
              end
              else if (_GEN_27)
                r_byte_cnt <= 16'h0;
              else
                r_byte_cnt <= r_byte_cnt + 16'h1;
            end
          end
        end
        if (~(_GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_6)) begin
          if (_GEN_7) begin
            if (io_i_valid)
              r_mem_data <= io_i_data;
          end
          else if (_GEN_8 | _GEN_9 | _GEN_10 | _GEN_11 | _GEN_12 | _GEN_13
                   | ~_GEN_14) begin
          end
          else
            r_mem_data <= io_b_mem_rdata[7:0];
        end
      end
    end
    if (_GEN | ~(_GEN_0 & io_i_valid)) begin
    end
    else
      r_num <= io_i_data;
    if (~(_GEN | _GEN_0 | _GEN_1 | _GEN_28)) begin
      if (_GEN_5) begin
        if (_GEN_23)
          r_start_0 <= io_i_data;
        if (_GEN_24)
          r_start_1 <= io_i_data;
      end
      else begin
        automatic logic _GEN_33 = _GEN_6 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10;
        if (_GEN_33 | ~(_GEN_11 & _GEN_23)) begin
        end
        else
          r_start_0 <= io_i_data;
        if (_GEN_33 | ~(_GEN_11 & _GEN_24)) begin
        end
        else
          r_start_1 <= io_i_data;
      end
    end
    if (~(_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5)) begin
      if (_GEN_6) begin
        if (_GEN_23)
          r_offset_0 <= io_i_data;
        if (_GEN_24)
          r_offset_1 <= io_i_data;
        if (_GEN_26)
          r_mem_addr <= {r_start_1, r_start_0};
      end
      else begin
        automatic logic _GEN_34;
        automatic logic _GEN_35;
        _GEN_34 = _GEN_10 | _GEN_11;
        _GEN_35 = _GEN_7 | _GEN_8 | _GEN_9 | _GEN_34;
        if (_GEN_35 | ~(_GEN_12 & _GEN_23)) begin
        end
        else
          r_offset_0 <= io_i_data;
        if (_GEN_35 | ~(_GEN_12 & _GEN_24)) begin
        end
        else
          r_offset_1 <= io_i_data;
        if (~_GEN_30) begin
          if (_GEN_9) begin
            if (~_GEN_27)
              r_mem_addr <= r_mem_addr + 16'h1;
          end
          else if (~_GEN_34) begin
            if (_GEN_12) begin
              if (_GEN_26)
                r_mem_addr <= {r_start_1, r_start_0};
            end
            else if (_GEN_16 | ~_GEN_29 | _GEN_27) begin
            end
            else
              r_mem_addr <= r_mem_addr + 16'h1;
          end
        end
      end
    end
    if (_GEN_22 | ~_GEN_18 | _GEN_17) begin
    end
    else if (_GEN_19)
      r_mem_wen <= 4'h1;
    else if (_GEN_20 | ~_GEN_21) begin
    end
    else
      r_mem_wen <= 4'h0;
  end // always @(posedge)
  assign io_o_valid =
    ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7
      | _GEN_8 | _GEN_9) & (_GEN_10 | ~(_GEN_11 | _GEN_12 | _GEN_16) & _GEN_15);
  assign io_o_data = r_mem_data;
  assign io_o_bl = r_bl;
  assign io_b_mem_valid =
    ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7)
    & (_GEN_8 | ~(_GEN_9 | _GEN_10 | _GEN_11 | _GEN_12) & _GEN_13);
  assign io_b_mem_addr = r_mem_addr;
  assign io_b_mem_wen = r_mem_wen;
  assign io_b_mem_wdata = {24'h0, r_mem_data};
endmodule

