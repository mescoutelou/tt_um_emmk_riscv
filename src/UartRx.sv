// Generated by CIRCT firtool-1.62.0
module UartRx(
  input         clock,
                reset,
  input  [15:0] io_i_ncycle,
  output        io_o_valid,
  output [7:0]  io_o_data,
  input         io_i_rx
);

  reg  [1:0]       r_cstate;
  reg  [7:0]       r_data;
  reg  [2:0]       r_bit_cnt;
  reg  [15:0]      r_cycle_cnt;
  reg              r_rx;
  wire             _GEN = r_cstate == 2'h0;
  wire             _GEN_0 = r_cstate == 2'h1;
  wire             _GEN_1 = r_cstate == 2'h2;
  wire             _GEN_2 = r_cycle_cnt == io_i_ncycle;
  wire             _GEN_3 = r_cycle_cnt == {1'h0, io_i_ncycle[15:1]};
  wire             _GEN_4 = _GEN_1 & _GEN_2;
  wire [3:0][1:0]  _GEN_5 =
    {{(&r_cstate) & _GEN_2 ? 2'h0 : r_cstate},
     {_GEN_2 & (&r_bit_cnt) ? 2'h3 : r_cstate},
     {_GEN_3 ? {~r_rx, 1'h0} : r_cstate},
     {r_rx ? r_cstate : 2'h1}};
  wire [3:0][15:0] _GEN_6 =
    {{_GEN_2 ? 16'h0 : r_cycle_cnt + 16'h1},
     {_GEN_2 ? 16'h0 : r_cycle_cnt + 16'h1},
     {_GEN_3 ? 16'h0 : r_cycle_cnt + 16'h1},
     {16'h0}};
  always @(posedge clock) begin
    if (reset) begin
      r_cstate <= 2'h0;
      r_rx <= 1'h1;
    end
    else begin
      r_cstate <= _GEN_5[r_cstate];
      r_rx <= _GEN ? io_i_rx : ~_GEN_0 & (~_GEN_1 & (&r_cstate) | io_i_rx);
    end
    if (_GEN)
      r_data <= 8'h0;
    else if (_GEN_0 | ~_GEN_4) begin
    end
    else
      r_data <= {r_rx, r_data[7:1]};
    if (_GEN | _GEN_0)
      r_bit_cnt <= 3'h0;
    else if (_GEN_4) begin
      if (&r_bit_cnt)
        r_bit_cnt <= 3'h0;
      else
        r_bit_cnt <= r_bit_cnt + 3'h1;
    end
    r_cycle_cnt <= _GEN_6[r_cstate];
  end // always @(posedge)
  assign io_o_valid = ~(_GEN | _GEN_0 | _GEN_1) & (&r_cstate) & _GEN_2;
  assign io_o_data = r_data;
endmodule

