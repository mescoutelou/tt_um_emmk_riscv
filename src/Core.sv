// Generated by CIRCT firtool-1.62.0
module Core(
  input         clock,
                reset,
                io_i_bl,
  output        io_b_mem_valid,
  output [15:0] io_b_mem_addr,
  output [3:0]  io_b_mem_wen,
  output [31:0] io_b_mem_wdata,
  input  [31:0] io_b_mem_rdata
);

  wire             _m_bru_io_o_br;
  wire [31:0]      _m_bru_io_o_res;
  wire [31:0]      _m_alu_io_o_res;
  wire [1:0]       _m_decoder_io_o_seq;
  wire [2:0]       _m_decoder_io_o_ctrl_alu_uop;
  wire             _m_decoder_io_o_ctrl_alu_signed;
  wire [2:0]       _m_decoder_io_o_ctrl_bru_uop;
  wire             _m_decoder_io_o_ctrl_bru_pc_rel;
  wire             _m_decoder_io_o_ctrl_mem_rw;
  wire [1:0]       _m_decoder_io_o_ctrl_mem_size;
  wire             _m_decoder_io_o_ctrl_mem_signed;
  wire             _m_decoder_io_o_ctrl_wb_en;
  wire [3:0]       _m_decoder_io_o_ctrl_wb_addr;
  wire [3:0]       _m_decoder_io_o_rs1;
  wire [3:0]       _m_decoder_io_o_rs2;
  wire             _m_decoder_io_o_s1_reg;
  wire [31:0]      _m_decoder_io_o_s1_data;
  wire             _m_decoder_io_o_s2_reg;
  wire [31:0]      _m_decoder_io_o_s2_data;
  wire             _m_decoder_io_o_s3_reg;
  wire [31:0]      _m_decoder_io_o_s3_data;
  wire [31:0]      _m_gpr_io_b_read_0_data;
  wire [31:0]      _m_gpr_io_b_read_1_data;
  wire             _m_fsm_io_o_fetch;
  wire             _m_fsm_io_o_instr;
  wire             _m_fsm_io_o_decoder;
  wire             _m_fsm_io_o_alu;
  wire             _m_fsm_io_o_bru;
  wire             _m_fsm_io_o_mem_req;
  wire             _m_fsm_io_o_mem_ack;
  wire             _m_fsm_io_o_wb;
  reg  [15:0]      r_pc;
  reg  [31:0]      r_instr;
  reg  [2:0]       r_ctrl_alu_uop;
  reg              r_ctrl_alu_signed;
  reg  [2:0]       r_ctrl_bru_uop;
  reg              r_ctrl_bru_pc_rel;
  reg              r_ctrl_mem_rw;
  reg  [1:0]       r_ctrl_mem_size;
  reg              r_ctrl_mem_signed;
  reg              r_ctrl_wb_en;
  reg  [3:0]       r_ctrl_wb_addr;
  reg  [31:0]      r_s1_res;
  reg  [31:0]      r_s2_pc;
  reg  [31:0]      r_s3_br;
  wire             _GEN = _m_fsm_io_o_bru & r_ctrl_bru_pc_rel;
  wire [3:0][31:0] _GEN_0 =
    {{r_s1_res},
     {io_b_mem_rdata},
     {r_ctrl_mem_signed
        ? {{16{io_b_mem_rdata[15]}}, io_b_mem_rdata[15:0]}
        : {16'h0, io_b_mem_rdata[15:0]}},
     {r_ctrl_mem_signed
        ? {{24{io_b_mem_rdata[7]}}, io_b_mem_rdata[7:0]}
        : {24'h0, io_b_mem_rdata[7:0]}}};
  wire             _GEN_1 = _m_fsm_io_o_alu & _m_fsm_io_o_mem_req;
  always @(posedge clock) begin
    if (reset)
      r_pc <= 16'h0;
    else if (_m_fsm_io_o_wb) begin
      if (r_s3_br[0])
        r_pc <= r_s2_pc[15:0];
      else
        r_pc <= r_pc + 16'h4;
    end
    if (_m_fsm_io_o_instr)
      r_instr <= io_b_mem_rdata;
    if (_m_fsm_io_o_decoder) begin
      r_ctrl_alu_uop <= _m_decoder_io_o_ctrl_alu_uop;
      r_ctrl_alu_signed <= _m_decoder_io_o_ctrl_alu_signed;
      r_ctrl_bru_uop <= _m_decoder_io_o_ctrl_bru_uop;
      r_ctrl_bru_pc_rel <= _m_decoder_io_o_ctrl_bru_pc_rel;
      r_ctrl_mem_rw <= _m_decoder_io_o_ctrl_mem_rw;
      r_ctrl_mem_size <= _m_decoder_io_o_ctrl_mem_size;
      r_ctrl_mem_signed <= _m_decoder_io_o_ctrl_mem_signed;
      r_ctrl_wb_en <= _m_decoder_io_o_ctrl_wb_en;
      r_ctrl_wb_addr <= _m_decoder_io_o_ctrl_wb_addr;
      r_s1_res <=
        _m_decoder_io_o_s1_reg ? _m_gpr_io_b_read_0_data : _m_decoder_io_o_s1_data;
      r_s2_pc <=
        _m_decoder_io_o_s2_reg ? _m_gpr_io_b_read_1_data : _m_decoder_io_o_s2_data;
      r_s3_br <=
        _m_decoder_io_o_s3_reg ? _m_gpr_io_b_read_1_data : _m_decoder_io_o_s3_data;
    end
    else if (_m_fsm_io_o_bru) begin
      r_s1_res <= _m_bru_io_o_res;
      r_s2_pc <= _m_alu_io_o_res;
      r_s3_br <= {31'h0, _m_bru_io_o_br};
    end
    else begin
      if (_GEN_1 | _m_fsm_io_o_alu)
        r_s1_res <= _m_alu_io_o_res;
      else if (_m_fsm_io_o_mem_ack & ~r_ctrl_mem_rw)
        r_s1_res <= _GEN_0[r_ctrl_mem_size];
      if (_GEN_1 | ~(_m_fsm_io_o_alu | _m_fsm_io_o_mem_ack)) begin
      end
      else
        r_s3_br <= 32'h0;
    end
  end // always @(posedge)
  Fsm m_fsm (
    .clock        (clock),
    .reset        (reset),
    .io_i_bl      (io_i_bl),
    .io_i_seq     (_m_decoder_io_o_seq),
    .io_o_fetch   (_m_fsm_io_o_fetch),
    .io_o_instr   (_m_fsm_io_o_instr),
    .io_o_decoder (_m_fsm_io_o_decoder),
    .io_o_alu     (_m_fsm_io_o_alu),
    .io_o_bru     (_m_fsm_io_o_bru),
    .io_o_mem_req (_m_fsm_io_o_mem_req),
    .io_o_mem_ack (_m_fsm_io_o_mem_ack),
    .io_o_wb      (_m_fsm_io_o_wb)
  );
  Gpr m_gpr (
    .clock            (clock),
    .io_b_read_0_addr (_m_decoder_io_o_rs1),
    .io_b_read_0_data (_m_gpr_io_b_read_0_data),
    .io_b_read_1_addr (_m_decoder_io_o_rs2),
    .io_b_read_1_data (_m_gpr_io_b_read_1_data),
    .io_b_write_en    (_m_fsm_io_o_wb & r_ctrl_wb_en),
    .io_b_write_addr  (r_ctrl_wb_addr),
    .io_b_write_data  (r_s1_res)
  );
  Decoder m_decoder (
    .io_i_pc              (r_pc),
    .io_i_instr           (r_instr),
    .io_o_seq             (_m_decoder_io_o_seq),
    .io_o_ctrl_alu_uop    (_m_decoder_io_o_ctrl_alu_uop),
    .io_o_ctrl_alu_signed (_m_decoder_io_o_ctrl_alu_signed),
    .io_o_ctrl_bru_uop    (_m_decoder_io_o_ctrl_bru_uop),
    .io_o_ctrl_bru_pc_rel (_m_decoder_io_o_ctrl_bru_pc_rel),
    .io_o_ctrl_mem_rw     (_m_decoder_io_o_ctrl_mem_rw),
    .io_o_ctrl_mem_size   (_m_decoder_io_o_ctrl_mem_size),
    .io_o_ctrl_mem_signed (_m_decoder_io_o_ctrl_mem_signed),
    .io_o_ctrl_wb_en      (_m_decoder_io_o_ctrl_wb_en),
    .io_o_ctrl_wb_addr    (_m_decoder_io_o_ctrl_wb_addr),
    .io_o_rs1             (_m_decoder_io_o_rs1),
    .io_o_rs2             (_m_decoder_io_o_rs2),
    .io_o_s1_reg          (_m_decoder_io_o_s1_reg),
    .io_o_s1_data         (_m_decoder_io_o_s1_data),
    .io_o_s2_reg          (_m_decoder_io_o_s2_reg),
    .io_o_s2_data         (_m_decoder_io_o_s2_data),
    .io_o_s3_reg          (_m_decoder_io_o_s3_reg),
    .io_o_s3_data         (_m_decoder_io_o_s3_data)
  );
  Alu m_alu (
    .io_i_uop    (r_ctrl_alu_uop),
    .io_i_signed (r_ctrl_alu_signed),
    .io_i_s1     (_GEN ? r_s3_br : r_s1_res),
    .io_i_s2     (_GEN ? {16'h0, r_pc} : r_s2_pc),
    .io_o_res    (_m_alu_io_o_res)
  );
  Bru m_bru (
    .io_i_uop (r_ctrl_bru_uop),
    .io_i_pc  (r_pc),
    .io_i_s1  (r_s1_res),
    .io_i_s2  (r_s2_pc),
    .io_o_br  (_m_bru_io_o_br),
    .io_o_res (_m_bru_io_o_res)
  );
  assign io_b_mem_valid = _m_fsm_io_o_mem_req ? ~_m_fsm_io_o_alu : _m_fsm_io_o_fetch;
  assign io_b_mem_addr = {_m_fsm_io_o_mem_req ? r_s1_res[15:2] : r_pc[15:2], 2'h0};
  assign io_b_mem_wen =
    _m_fsm_io_o_mem_req & r_ctrl_mem_rw
      ? (r_ctrl_mem_size == 2'h0
           ? 4'h1
           : r_ctrl_mem_size == 2'h1 ? 4'h3 : {4{r_ctrl_mem_size == 2'h2}})
      : 4'h0;
  assign io_b_mem_wdata = r_s3_br;
endmodule

