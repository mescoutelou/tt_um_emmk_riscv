// Generated by CIRCT firtool-1.62.0
module Uart(
  input         clock,
                reset,
                io_i_bl,
                io_b_mem_valid,
  input  [4:0]  io_b_mem_addr,
  input  [3:0]  io_b_mem_wen,
  input  [31:0] io_b_mem_wdata,
  output [31:0] io_b_mem_rdata,
  output        io_o_bl_ready,
  input         io_i_bl_valid,
  input  [7:0]  io_i_bl_data,
  output        io_o_bl_valid,
  output [7:0]  io_o_bl_data,
  input         io_b_uart_rx,
  output        io_b_uart_tx
);

  wire        _m_tx_io_o_ready;
  wire        _m_rx_io_o_valid;
  wire [7:0]  _m_rx_io_o_data;
  reg  [15:0] r_ncycle;
  reg  [31:0] r_rdata;
  reg         r_rx_valid;
  reg  [7:0]  r_rx_data;
  wire        _GEN = io_b_mem_addr == 5'h4;
  wire        _GEN_0 = io_b_mem_valid & io_b_mem_wen[0];
  wire        _GEN_1 = io_b_mem_addr == 5'h0;
  wire        _GEN_2 = io_b_mem_addr == 5'h8;
  wire        _GEN_3 = io_b_mem_addr == 5'h10;
  wire        _GEN_4 = ~io_i_bl & _m_rx_io_o_valid;
  always @(posedge clock) begin
    if (reset) begin
      r_ncycle <= 16'h1458;
      r_rx_valid <= 1'h0;
    end
    else begin
      if (_GEN & _GEN_0 & io_b_mem_wen[1])
        r_ncycle <= io_b_mem_wdata[15:0];
      r_rx_valid <= _GEN_4 | (_GEN_1 | _GEN | _GEN_2 | ~_GEN_3) & r_rx_valid;
    end
    r_rdata <=
      _GEN_1
        ? 32'h0
        : _GEN
            ? {16'h0, r_ncycle}
            : _GEN_2
                ? {27'h0, _m_tx_io_o_ready, 3'h0, r_rx_valid}
                : _GEN_3 ? {24'h0, r_rx_data} : 32'h0;
    if (_GEN_4)
      r_rx_data <= _m_rx_io_o_data;
  end // always @(posedge)
  UartRx m_rx (
    .clock       (clock),
    .reset       (reset),
    .io_i_ncycle (r_ncycle),
    .io_o_valid  (_m_rx_io_o_valid),
    .io_o_data   (_m_rx_io_o_data),
    .io_i_rx     (io_b_uart_rx)
  );
  UartTx m_tx (
    .clock       (clock),
    .reset       (reset),
    .io_i_ncycle (r_ncycle),
    .io_o_ready  (_m_tx_io_o_ready),
    .io_i_valid  (io_i_bl ? io_i_bl_valid : ~_GEN & io_b_mem_addr == 5'h14 & _GEN_0),
    .io_i_data   (io_i_bl ? io_i_bl_data : io_b_mem_wdata[7:0]),
    .io_o_tx     (io_b_uart_tx)
  );
  assign io_b_mem_rdata = r_rdata;
  assign io_o_bl_ready = _m_tx_io_o_ready;
  assign io_o_bl_valid = _m_rx_io_o_valid;
  assign io_o_bl_data = _m_rx_io_o_data;
endmodule

